using System.Diagnostics;

namespace MalwarebytesService
{
    public class FileSystemWatcherService
    {
        private readonly FileSystemWatcher _watchFolder;
        private readonly ILogger _logger;

        public FileSystemWatcherService(ILogger<WindowsBackgroundService> logger, IConfiguration config)
        {

            _logger = logger;
            try
            {
                var folders = config.GetSection("foldersToWatch").Get<string[]>();
                if (!folders.Any())
                {
                    _logger.LogInformation($"No folders were added");
                }
                else
                {
                    foreach (var folder in folders)
                    {
                        _watchFolder = new FileSystemWatcher();

                        _logger.LogInformation($"Adding {folder} to watcher");

                        StartActivityMonitoring(folder);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"uh oh, something went wrong: {ex.Message}");
            }


        }

        private void StartActivityMonitoring(string sPath)
        {
            _watchFolder.Path = sPath;
            _watchFolder.IncludeSubdirectories = true;
            _watchFolder.NotifyFilter = NotifyFilters.Attributes |
            NotifyFilters.CreationTime |
            NotifyFilters.DirectoryName |
            NotifyFilters.FileName |
            NotifyFilters.LastAccess |
            NotifyFilters.LastWrite |
            NotifyFilters.Security |
            NotifyFilters.Size;

            _watchFolder.Changed += new FileSystemEventHandler(OnChanged);
            _watchFolder.Created += new FileSystemEventHandler(OnChanged);
            _watchFolder.Deleted += new FileSystemEventHandler(OnChanged);

            _watchFolder.Renamed += new System.IO.RenamedEventHandler(OnRenamed);

            _watchFolder.EnableRaisingEvents = true;

        }
        private void OnChanged(object sender, System.IO.FileSystemEventArgs e)
        {
            var eventLogs = EventLog.GetEventLogs();

            _logger.LogInformation($"File {e.FullPath} - Action: {e.ChangeType}");

        }

        public void OnRenamed(object source, RenamedEventArgs e)
        {
            _logger.LogInformation($"{e.OldFullPath} renamed to {e.FullPath}");
        }

    }

}
